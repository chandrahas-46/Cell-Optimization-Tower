#import libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

#Read Dataset
data=pd.read_csv(r"C:\Users\Chandrahas\Desktop\mobile_tower.csv")
data.head(20)

#Represent dataset as 2-D graph
plt.scatter(data['x-coordinte'],data['y-coordinate'])
plt.xlabel('x-coordinte')
plt.ylabel('y-coordinate')
data.info()

#Data Preprocessing
from sklearn import preprocessing
data_scaled=data.copy()
data_scaled=preprocessing.scale(data)
data_scaled

from sklearn.cluster import KMeans
#within cluster sum of square
wcss = []
#we have 8 Towers and we have to do mimize the number of tower
for i in range(1,8):
    kmeans = KMeans(n_clusters = i, random_state=0)
    kmeans.fit(data_scaled)    #train k-mean model
    wcss.append(kmeans.inertia_)    #append sum of square distances into wcss list
#inertia is used to calculate sum of square distances for each cluster we have

#Using this graph we will get optimal number of towers
plt.plot(range(1,8), wcss)
plt.xlabel('Number of Towers')
plt.ylabel('wcss value')

#training model, here we have not any label so trained all data
kmean_cluster = KMeans(3)
kmean_cluster.fit(data_scaled)

cluster_data = data.copy()
cluster_data['cluster_pred'] = kmeans_cluster.fit_predict(data_scaled)
cluster_data.head(20)

kmeans_cluster.labels_
#Visualize the all data points with their cluster
plt.scatter(data['x-coordinte'],data['y-coordinate'], c=cluster_data['cluster_pred'])
plt.xlabel('x-coordinte')
plt.ylabel('y-coordinate')

c_mean = cluster_data.groupby('cluster_pred')['x-coordinte'].mean()
c_mean1 = cluster_data.groupby('cluster_pred')['y-coordinate'].mean()

c_mean = c_mean.reset_index()
c_mean.columns = ['Tower','x-coordinate']
c_mean1 = c_mean1.reset_index()
c_mean1.columns = ['Tower1','y-coordinate']

mean = [c_mean, c_mean1]
results = pd.concat(mean, axis=1)
#axis=1 means perform operation column wise
results = results.drop('Tower1', axis = 1)

df = pd.DataFrame(results)
new_column = pd.Series(['1', '2', '3'], name='Tower', index=[0, 1, 2])
df.update(new_column)

results
